openapi: 3.0.1
info:
  title: Bookstore API
  description: API for managing books in the bookstore.
  version: 1.0.0

paths:
  /api/books:
    post:
      tags:
        - books
      summary: Create a new book
      operationId: create
      requestBody:
        description: Book to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequest'
        required: true
      responses:
        '200':
          description: The created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Book with the given ISBN already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - books
      summary: Get all books
      description: This operation supports pagination
      operationId: getAll
      x-spring-paginated: true
      responses:
        '200':
          description: List of all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/{id}:
    get:
      tags:
        - books
      summary: Get a book by ID
      operationId: get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The requested book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - books
      summary: Update a book by ID
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Book details to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequest'
        required: true
      responses:
        '200':
          description: The updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - Another Book with the given ISBN already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - books
      summary: Delete a book by ID
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book successfully deleted
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/search:
    post:
      tags:
        - books
      summary: Search for books by parameters
      operationId: search
      x-spring-paginated: true
      requestBody:
        description: Search parameters for books
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookSearchParameters'
        required: false
      responses:
        '200':
          description: List of books matching search parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    CreateBookRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          minLength: 1
          example: "The Great Gatsby"
          description: "Title of the book. Must be between 1 and 255 characters."
        author:
          type: string
          maxLength: 255
          minLength: 1
          example: "F. Scott Fitzgerald"
          description: "Author of the book. Must be between 1 and 255 characters."
        isbn:
          type: string
          maxLength: 13
          minLength: 1
          example: "9780743273565"
          description: "ISBN of the book. Must be between 1 and 13 characters."
        price:
          type: number
          minimum: 0
          example: 10.99
          description: "Price of the book. Must be greater than or equal to 0."
        description:
          type: string
          maxLength: 1000
          example: "A novel about the American Dream."
          description: "Description of the book. Must be less than 1000 characters."
        coverImage:
          type: string
          maxLength: 255
          example: "http://example.com/cover.jpg"
          description: "URL for the cover image of the book. Must be less than 255 characters."
      required:
        - title
        - author
        - isbn
        - price

    UpdateBookRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          example: "The Great Gatsby"
          description: "Title of the book. Must be less than 255 characters."
        author:
          type: string
          maxLength: 255
          example: "F. Scott Fitzgerald"
          description: "Author of the book. Must be less than 255 characters."
        isbn:
          type: string
          maxLength: 13
          example: "9780743273565"
          description: "ISBN of the book. Must be less than 13 characters."
        price:
          type: number
          minimum: 0
          example: 10.99
          description: "Price of the book. Must be greater than or equal to 0."
        description:
          type: string
          maxLength: 1000
          example: "A novel about the American Dream."
          description: "Description of the book. Must be less than 1000 characters."
        coverImage:
          type: string
          maxLength: 255
          example: "http://example.com/cover.jpg"
          description: "URL for the cover image of the book. Must be less than 255 characters."

    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        price:
          type: number
        description:
          type: string
        coverImage:
          type: string

    BookSearchParameters:
      type: object
      properties:
        titles:
          type: array
          items:
            type: string
        authors:
          type: array
          items:
            type: string
        isbns:
          type: array
          items:
            type: string

    Error:
      type: object
      properties:
        id:
          type: string
        messages:
          type: array
          items:
            type: string
